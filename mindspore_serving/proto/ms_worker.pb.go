// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mindspore_serving/proto/ms_worker.proto

package mindspore_serving_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("mindspore_serving/proto/ms_worker.proto", fileDescriptor_442a3a64a68cfcb2)
}

var fileDescriptor_442a3a64a68cfcb2 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xc7, 0x41, 0xaa, 0xf8, 0x30, 0x62, 0x31, 0x03, 0x52, 0xc7, 0x0a, 0x14, 0x2a, 0x20, 0x45,
	0xe1, 0x09, 0x2a, 0x3e, 0xb6, 0x4a, 0x55, 0x3a, 0x30, 0x30, 0x54, 0x69, 0x72, 0x58, 0x27, 0x1a,
	0x3b, 0xb5, 0x1d, 0x3e, 0x24, 0xde, 0x8c, 0xf7, 0x62, 0x46, 0xb1, 0xe3, 0x54, 0x0c, 0x71, 0xc2,
	0x98, 0xbb, 0xdf, 0xfd, 0x7f, 0xbe, 0xe8, 0x48, 0x90, 0x23, 0xcf, 0x54, 0x21, 0x24, 0x2c, 0x15,
	0xc8, 0x37, 0xe4, 0x6c, 0x52, 0x48, 0xa1, 0xc5, 0x24, 0x57, 0xcb, 0x77, 0x21, 0x5f, 0x41, 0x86,
	0xe6, 0x9b, 0x9e, 0x36, 0x60, 0x58, 0x83, 0xb6, 0x31, 0xbc, 0xf0, 0x24, 0x98, 0x42, 0x0a, 0x35,
	0xe9, 0x73, 0xe5, 0x89, 0xd2, 0xce, 0x35, 0xbc, 0xf2, 0x80, 0x19, 0x2a, 0x2d, 0x71, 0x55, 0x6a,
	0xc8, 0x2c, 0x1d, 0x7d, 0xef, 0x92, 0x83, 0xd9, 0xe2, 0xc9, 0x3c, 0x96, 0x3e, 0x93, 0xfd, 0xb9,
	0x84, 0x0c, 0x53, 0x4d, 0x83, 0xb0, 0xe5, 0xc9, 0x61, 0x4d, 0xc4, 0xb0, 0x29, 0x41, 0xe9, 0xe1,
	0x79, 0x37, 0x58, 0xac, 0x3f, 0x47, 0x3b, 0x34, 0x26, 0x83, 0x87, 0x0f, 0xd4, 0xf4, 0xac, 0x75,
	0xa0, 0x6a, 0xbb, 0xd8, 0x51, 0x07, 0x65, 0x32, 0xa3, 0x9f, 0x01, 0x39, 0x99, 0x2d, 0xee, 0xb7,
	0x5b, 0xd5, 0x8b, 0x24, 0xe4, 0x70, 0xca, 0x80, 0x6b, 0x23, 0x1c, 0xb7, 0x46, 0x35, 0x8c, 0xb3,
	0x06, 0x7d, 0x50, 0xbb, 0x4e, 0x4e, 0x8e, 0x4d, 0x2d, 0x06, 0x86, 0xd5, 0xdf, 0xa7, 0xd7, 0xfe,
	0x59, 0xc7, 0x39, 0xd5, 0x65, 0x5f, 0xdc, 0xea, 0x18, 0x39, 0x32, 0xf5, 0xc7, 0x04, 0xd7, 0x90,
	0xd1, 0x8e, 0x69, 0x4b, 0x39, 0xd5, 0xb8, 0x1f, 0x6c, 0x45, 0x5f, 0x84, 0x9a, 0xea, 0x9d, 0xe0,
	0x2f, 0xc8, 0xa6, 0xe9, 0xa6, 0x44, 0x09, 0x34, 0xf2, 0x47, 0xfc, 0x81, 0x9d, 0xf6, 0xe6, 0x5f,
	0x33, 0xcd, 0x91, 0xcc, 0x91, 0x33, 0xcf, 0x91, 0x54, 0xed, 0xee, 0x23, 0xb1, 0xd4, 0x36, 0x53,
	0xf8, 0x33, 0x45, 0xaf, 0x4c, 0xd1, 0x64, 0xae, 0xf6, 0x4c, 0xe9, 0xf6, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xe2, 0xb7, 0xb3, 0xce, 0x02, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MSWorkerClient is the client API for MSWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MSWorkerClient interface {
	// for master
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error)
	Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitReply, error)
}

type mSWorkerClient struct {
	cc *grpc.ClientConn
}

func NewMSWorkerClient(cc *grpc.ClientConn) MSWorkerClient {
	return &mSWorkerClient{cc}
}

func (c *mSWorkerClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error) {
	out := new(PredictReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSWorker/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSWorkerClient) Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitReply, error) {
	out := new(ExitReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSWorker/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSWorkerServer is the server API for MSWorker service.
type MSWorkerServer interface {
	// for master
	Predict(context.Context, *PredictRequest) (*PredictReply, error)
	Exit(context.Context, *ExitRequest) (*ExitReply, error)
}

func RegisterMSWorkerServer(s *grpc.Server, srv MSWorkerServer) {
	s.RegisterService(&_MSWorker_serviceDesc, srv)
}

func _MSWorker_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSWorkerServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSWorker/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSWorkerServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSWorker_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSWorkerServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSWorker/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSWorkerServer).Exit(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MSWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mindspore.serving.proto.MSWorker",
	HandlerType: (*MSWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _MSWorker_Predict_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _MSWorker_Exit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mindspore_serving/proto/ms_worker.proto",
}

// MSDistributedWorkerClient is the client API for MSDistributedWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MSDistributedWorkerClient interface {
	// for worker agent
	AgentExit(ctx context.Context, in *AgentExitRequest, opts ...grpc.CallOption) (*AgentExitReply, error)
	AgentRegister(ctx context.Context, in *AgentRegisterRequest, opts ...grpc.CallOption) (*AgentRegisterReply, error)
	AgentFailed(ctx context.Context, in *AgentFailedRequest, opts ...grpc.CallOption) (*AgentFailedReply, error)
	AgentConfigAcquire(ctx context.Context, in *AgentConfigAcquireRequest, opts ...grpc.CallOption) (*AgentConfigAcquireReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongReply, error)
}

type mSDistributedWorkerClient struct {
	cc *grpc.ClientConn
}

func NewMSDistributedWorkerClient(cc *grpc.ClientConn) MSDistributedWorkerClient {
	return &mSDistributedWorkerClient{cc}
}

func (c *mSDistributedWorkerClient) AgentExit(ctx context.Context, in *AgentExitRequest, opts ...grpc.CallOption) (*AgentExitReply, error) {
	out := new(AgentExitReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/AgentExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDistributedWorkerClient) AgentRegister(ctx context.Context, in *AgentRegisterRequest, opts ...grpc.CallOption) (*AgentRegisterReply, error) {
	out := new(AgentRegisterReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/AgentRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDistributedWorkerClient) AgentFailed(ctx context.Context, in *AgentFailedRequest, opts ...grpc.CallOption) (*AgentFailedReply, error) {
	out := new(AgentFailedReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/AgentFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDistributedWorkerClient) AgentConfigAcquire(ctx context.Context, in *AgentConfigAcquireRequest, opts ...grpc.CallOption) (*AgentConfigAcquireReply, error) {
	out := new(AgentConfigAcquireReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/AgentConfigAcquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDistributedWorkerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDistributedWorkerClient) Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongReply, error) {
	out := new(PongReply)
	err := c.cc.Invoke(ctx, "/mindspore.serving.proto.MSDistributedWorker/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSDistributedWorkerServer is the server API for MSDistributedWorker service.
type MSDistributedWorkerServer interface {
	// for worker agent
	AgentExit(context.Context, *AgentExitRequest) (*AgentExitReply, error)
	AgentRegister(context.Context, *AgentRegisterRequest) (*AgentRegisterReply, error)
	AgentFailed(context.Context, *AgentFailedRequest) (*AgentFailedReply, error)
	AgentConfigAcquire(context.Context, *AgentConfigAcquireRequest) (*AgentConfigAcquireReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Pong(context.Context, *PongRequest) (*PongReply, error)
}

func RegisterMSDistributedWorkerServer(s *grpc.Server, srv MSDistributedWorkerServer) {
	s.RegisterService(&_MSDistributedWorker_serviceDesc, srv)
}

func _MSDistributedWorker_AgentExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).AgentExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/AgentExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).AgentExit(ctx, req.(*AgentExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDistributedWorker_AgentRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).AgentRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/AgentRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).AgentRegister(ctx, req.(*AgentRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDistributedWorker_AgentFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).AgentFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/AgentFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).AgentFailed(ctx, req.(*AgentFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDistributedWorker_AgentConfigAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentConfigAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).AgentConfigAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/AgentConfigAcquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).AgentConfigAcquire(ctx, req.(*AgentConfigAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDistributedWorker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDistributedWorker_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDistributedWorkerServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindspore.serving.proto.MSDistributedWorker/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDistributedWorkerServer).Pong(ctx, req.(*PongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MSDistributedWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mindspore.serving.proto.MSDistributedWorker",
	HandlerType: (*MSDistributedWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentExit",
			Handler:    _MSDistributedWorker_AgentExit_Handler,
		},
		{
			MethodName: "AgentRegister",
			Handler:    _MSDistributedWorker_AgentRegister_Handler,
		},
		{
			MethodName: "AgentFailed",
			Handler:    _MSDistributedWorker_AgentFailed_Handler,
		},
		{
			MethodName: "AgentConfigAcquire",
			Handler:    _MSDistributedWorker_AgentConfigAcquire_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MSDistributedWorker_Ping_Handler,
		},
		{
			MethodName: "Pong",
			Handler:    _MSDistributedWorker_Pong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mindspore_serving/proto/ms_worker.proto",
}
